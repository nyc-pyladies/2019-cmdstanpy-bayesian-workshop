// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace worldcup_semis_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "../models/worldcup_semis.stan");
    reader.add_event(43, 41, "end", "../models/worldcup_semis.stan");
    return reader;
}

class worldcup_semis_model
  : public stan::model::model_base_crtp<worldcup_semis_model> {
private:
        int I;
        int N;
        vector_d prior_score;
        std::vector<int> team_1;
        std::vector<int> team_2;
        vector_d score_1;
        vector_d score_2;
        std::vector<int> team_1_semis;
        std::vector<int> team_2_semis;
        vector_d y;
public:
    worldcup_semis_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    worldcup_semis_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "worldcup_semis_model_namespace::worldcup_semis_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 4;
            validate_non_negative_index("prior_score", "I", I);
            context__.validate_dims("data initialization", "prior_score", "vector_d", context__.to_vec(I));
            prior_score = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            vals_r__ = context__.vals_r("prior_score");
            pos__ = 0;
            size_t prior_score_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < prior_score_j_1_max__; ++j_1__) {
                prior_score(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("team_1", "N", N);
            context__.validate_dims("data initialization", "team_1", "int", context__.to_vec(N));
            team_1 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("team_1");
            pos__ = 0;
            size_t team_1_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < team_1_k_0_max__; ++k_0__) {
                team_1[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("team_2", "N", N);
            context__.validate_dims("data initialization", "team_2", "int", context__.to_vec(N));
            team_2 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("team_2");
            pos__ = 0;
            size_t team_2_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < team_2_k_0_max__; ++k_0__) {
                team_2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("score_1", "N", N);
            context__.validate_dims("data initialization", "score_1", "vector_d", context__.to_vec(N));
            score_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("score_1");
            pos__ = 0;
            size_t score_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < score_1_j_1_max__; ++j_1__) {
                score_1(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("score_2", "N", N);
            context__.validate_dims("data initialization", "score_2", "vector_d", context__.to_vec(N));
            score_2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("score_2");
            pos__ = 0;
            size_t score_2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < score_2_j_1_max__; ++j_1__) {
                score_2(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("team_1_semis", "2", 2);
            context__.validate_dims("data initialization", "team_1_semis", "int", context__.to_vec(2));
            team_1_semis = std::vector<int>(2, int(0));
            vals_i__ = context__.vals_i("team_1_semis");
            pos__ = 0;
            size_t team_1_semis_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < team_1_semis_k_0_max__; ++k_0__) {
                team_1_semis[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("team_2_semis", "2", 2);
            context__.validate_dims("data initialization", "team_2_semis", "int", context__.to_vec(2));
            team_2_semis = std::vector<int>(2, int(0));
            vals_i__ = context__.vals_i("team_2_semis");
            pos__ = 0;
            size_t team_2_semis_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < team_2_semis_k_0_max__; ++k_0__) {
                team_2_semis[k_0__] = vals_i__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 14;
            validate_non_negative_index("y", "N", N);
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(y, DUMMY_VAR__);
            stan::math::assign(y,subtract(score_1, score_2));

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            validate_non_negative_index("alpha", "I", I);
            num_params_r__ += I;
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~worldcup_semis_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 17;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "I", I);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(I));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(I);
        size_t alpha_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("sigma_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_a", "double", context__.to_vec());
        double sigma_a(0);
        sigma_a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("sigma_y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_y");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_y", "double", context__.to_vec());
        double sigma_y(0);
        sigma_y = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_y);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_y: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 17;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_constrain(lp__);
            else
                beta = in__.scalar_constrain();

            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain(I, lp__);
            else
                alpha = in__.vector_constrain(I);

            current_statement_begin__ = 19;
            local_scalar_t__ sigma_a;
            (void) sigma_a;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_a = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_a = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 20;
            local_scalar_t__ sigma_y;
            (void) sigma_y;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_y = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_y = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("ability", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ability(I);
            stan::math::initialize(ability, DUMMY_VAR__);
            stan::math::fill(ability, DUMMY_VAR__);
            stan::math::assign(ability,add(multiply(beta, prior_score), multiply(alpha, sigma_a)));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 24;
            size_t ability_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < ability_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ability(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ability" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ability: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 27;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 28;
            lp_accum__.add(normal_log<propto__>(beta, 0, 2.5));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(sigma_a, 0, 2.5));
            current_statement_begin__ = 30;
            lp_accum__.add(normal_log<propto__>(sigma_y, 0, 2.5));
            current_statement_begin__ = 32;
            lp_accum__.add(student_t_log<propto__>(y, 7, subtract(stan::model::rvalue(ability, stan::model::cons_list(stan::model::index_multi(team_1), stan::model::nil_index_list()), "ability"), stan::model::rvalue(ability, stan::model::cons_list(stan::model::index_multi(team_2), stan::model::nil_index_list()), "ability")), sigma_y));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("alpha");
        names__.push_back("sigma_a");
        names__.push_back("sigma_y");
        names__.push_back("ability");
        names__.push_back("semis");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "worldcup_semis_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double beta = in__.scalar_constrain();
        vars__.push_back(beta);

        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain(I);
        size_t alpha_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }

        double sigma_a = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_a);

        double sigma_y = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_y);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("ability", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ability(I);
            stan::math::initialize(ability, DUMMY_VAR__);
            stan::math::fill(ability, DUMMY_VAR__);
            stan::math::assign(ability,add(multiply(beta, prior_score), multiply(alpha, sigma_a)));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t ability_j_1_max__ = I;
                for (size_t j_1__ = 0; j_1__ < ability_j_1_max__; ++j_1__) {
                    vars__.push_back(ability(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 36;
            validate_non_negative_index("semis", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> semis(2);
            stan::math::initialize(semis, DUMMY_VAR__);
            stan::math::fill(semis, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 37;
            for (int n = 1; n <= 2; ++n) {

                current_statement_begin__ = 38;
                stan::model::assign(semis, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            student_t_rng(7, (get_base1(ability, get_base1(team_1_semis, n, "team_1_semis", 1), "ability", 1) - get_base1(ability, get_base1(team_2_semis, n, "team_2_semis", 1), "ability", 1)), sigma_y, base_rng__), 
                            "assigning variable semis");
            }

            // validate, write generated quantities
            current_statement_begin__ = 36;
            size_t semis_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < semis_j_1_max__; ++j_1__) {
                vars__.push_back(semis(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "worldcup_semis_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t ability_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < ability_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ability" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t semis_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < semis_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "semis" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = I;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t ability_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < ability_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ability" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t semis_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < semis_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "semis" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef worldcup_semis_model_namespace::worldcup_semis_model stan_model;

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

